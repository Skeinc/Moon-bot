import { getMenuKeyboard } from "@constants/keyboards.const";
import { Context } from "grammy";
import { newSpreadCommand } from "./newSpread.command";
import { checkTelegramID } from "@utils/checkTelegramID.util";
import { UserService } from "@services/user.service";
import { CreateUserInterface, UserInterface } from "@interfaces/api/user.interface";
import { logger } from "@services/logger.service";
import { CreateReferralInterface } from "@interfaces/api/referral.interface";
import { ReferralService } from "@services/referral.service";
import { CreateBonusInterface } from "@interfaces/api/bonus.interface";
import { BonusService } from "@services/bonus.service";
import { BonusTypeEnum } from "../enums/bonus.enum";
import { sessionStateManager } from "../states/sessionState";
import { userStateManager } from "../states/userState";

export const startCommand = async (ctx: Context) => {
    if(!await checkTelegramID(ctx)) {
        return;
    }

    // –î–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const telegramId = ctx.from?.id!;
    const username = ctx.from?.username || null;

    try {
        const userData: UserInterface | null = await UserService.getUserByTelegramId(telegramId);

        if (!userData) {
            const body = { telegramId, username };

            const createdUserData: CreateUserInterface | null = await UserService.createUser(body);

            const referralId = ctx.match ?? null;

            if(createdUserData) {
                logger.info(`–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å c–æ–∑–¥–∞–Ω: ${createdUserData.username || createdUserData.telegramId}`);

                // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–µ—Å—Å–∏—é
                sessionStateManager.setSession(Number(createdUserData.telegramId));

                // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                userStateManager.initializeUser({
                    id: createdUserData.id,
                    telegramId: createdUserData.telegramId,
                    username: createdUserData.username,
                    roleId: createdUserData.role.id,
                    requestsLeft: createdUserData.requestsLeft,
                    subscriptionExpiry: createdUserData.subscriptionExpiry,
                    referrerId: createdUserData.referrerId,
                    referralLink: createdUserData.referralLink,
                })

                // –õ–æ–≥–∏–∫–∞ –Ω–∞—á–∏—Å–ª–µ–Ω–∏—è –±–æ–Ω—É—Å–æ–≤ —Ä–µ—Ñ–µ—Ä–µ—Ä—É
                if(referralId && referralId !== String(telegramId)) {
                    // –ò—â–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∫–æ—Ç–æ—Ä—ã–π –ø—Ä–∏–≥–ª–∞—Å–∏–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                    const referrerData: UserInterface | null = await UserService.getUserByTelegramId(Number(referralId));

                    if(referrerData) {
                        logger.info(`–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–π–¥–µ–Ω –ø–æ —Ç–µ–ª–µ–≥—Ä–∞–º ID: ${referralId}`);

                        // –°–æ–∑–¥–∞–µ–º —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—É—é —Å–∏—Å—Ç–µ–º—É
                        const body = { referrerId: referrerData.id, referredUserId: createdUserData.id, bonusCount: 1 };

                        const createdReferralData: CreateReferralInterface | null = await ReferralService.createReferral(body);

                        if(createdReferralData) {
                            logger.info(`–†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ —Å–æ–∑–¥–∞–Ω–∞ —Å ID: ${createdReferralData?.id}`);

                            const body = { userId: createdReferralData.referrer.id, referralId: createdReferralData.id, bonusType: BonusTypeEnum.REQUESTS, bonusValue: createdReferralData.bonusCount };

                            // –°–æ–∑–¥–∞–µ–º –±–æ–Ω—É—Å
                            const createdBonusData: CreateBonusInterface | null = await BonusService.createBonus(body);

                            if(createdBonusData) {
                                logger.info(`–ë–æ–Ω—É—Å —Å–æ–∑–¥–∞–Ω —Å ID: ${createdBonusData.id}`);
                            }
                            else {
                                logger.error(`–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –±–æ–Ω—É—Å —Å–æ —Å–ª–µ–¥—É—é—â–∏–º–∏ –¥–∞–Ω–Ω—ã–º–∏`, body);
                            }
                        }
                        else {
                            logger.error(`–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—É—é –ø—Ä–æ–≥—Ä–∞–º–º—É —Å–æ —Å–ª–µ–¥—É—é—â–∏–º–∏ –¥–∞–Ω–Ω—ã–º–∏`, body);
                        }

                    }
                    else {
                        logger.error(`–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ —Ç–µ–ª–µ–≥—Ä–∞–º ID: ${referralId}`);
                    }
                }
            }
        }
        else {
            logger.info(`–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–π–¥–µ–Ω: ${userData?.username || userData?.telegramId}`);

            // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–µ—Å—Å–∏—é
            sessionStateManager.setSession(Number(userData.telegramId));

            // –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            userStateManager.initializeUser({
                id: userData.id,
                telegramId: userData.telegramId,
                username: userData.username,
                roleId: userData.roleId,
                requestsLeft: userData.requestsLeft,
                subscriptionExpiry: userData.subscriptionExpiry,
                referrerId: userData.referrerId,
                referralLink: userData.referralLink,
            });
        }
    } catch (error) {
        logger.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: ${(error as Error).message}`);

        await ctx.reply("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∞—à–µ–π –∫–æ–º–∞–Ω–¥—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.");

        return;
    }

    // –ü–µ—Ä–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    await ctx.reply(
        "–ü—Ä–∏–≤–µ—Ç! –Ø –∑–¥–µ—Å—å, —á—Ç–æ–±—ã –ø–æ–º–æ—á—å —Ç–µ–±–µ —Ä–∞–∑–æ–±—Ä–∞—Ç—å—Å—è –≤ —Ç–≤–æ–µ–º —Ä–∞—Å–∫–ª–∞–¥–µ –ø–æ –∫–æ–ª–æ–¥–µ –¢–ê–†–û –ú–ê–ù–ê–†–ê.\n\n" +
        "‚úÖ –ù–∞–ø–∏—à–∏ —Å–≤–æ–π –≤–æ–ø—Ä–æ—Å –¥–ª—è —Ä–∞—Å–∫–ª–∞–¥–∞.\n" +
        "‚úÖ –í—ã–±–µ—Ä–∏ –∫–∞—Ä—Ç—ã.\n\n" +
        "üéÅ –ù–æ–≤—ã–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º –¥–æ—Å—Ç—É–ø–Ω–æ 3 –±–µ—Å–ø–ª–∞—Ç–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–∞!\n\n" +
        "–° –ª—é–±–æ–≤—å—é, —Ç–≤–æ–π –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π —Ç–∞—Ä–æ–ª–æ–≥ Moon. üí´\n\n" +
        "P.S. –ï—Å–ª–∏ —á—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫, –ø–æ–ø—Ä–æ–±—É–π –Ω–∞–∂–∞—Ç—å /start.\n" +
        "–ú–µ–Ω—é –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤–Ω–∏–∑—É, —Ä—è–¥–æ–º —Å –ø–æ–ª–µ–º –¥–ª—è –≤–≤–æ–¥–∞ —Ç–µ–∫—Å—Ç–∞.\n\n" +
        "–î–ª—è —Å–≤—è–∑–∏ —Å —Ç–µ—Ö–ø–æ–¥–¥–µ—Ä–∂–∫–æ–π: @bot_lovemyself.", {
            reply_markup: {
                keyboard: getMenuKeyboard().build(),
                resize_keyboard: true,
                is_persistent: true,
            },
        }
    );

    // –í—ã–∑–æ–≤ newSpreadCommand –ø–æ—Å–ª–µ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
    await newSpreadCommand(ctx);
};