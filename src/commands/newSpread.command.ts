import { UserInterface } from "@interfaces/api/user.interface";
import { logger } from "@services/logger.service";
import { UserService } from "@services/user.service";
import { checkTelegramID } from "@utils/checkTelegramID.util";
import { Context } from "grammy";
import { pluralize } from "@utils/pluralize.util";
import { getTimeRemainingInDays, getTimeRemainingInHMS, getTimeRemainingInSeconds } from "@utils/date.util";
import { SessionStepsEnum } from "../enums/session.enum";
import { sessionStateManager } from "../states/sessionState";

export const newSpreadCommand = async (ctx: Context) => {
    if(!await checkTelegramID(ctx)) {
        return;
    }

    // –î–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const telegramId = ctx.from?.id!;
    
    // –î–∞–Ω–Ω—ã–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–º–∞–Ω–¥—ã
    const commandData = {
        freeRequests: 0,
        hasSubscription: false,
        subscriptionExpiry: '',
    };

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    try {
        const userData: UserInterface | null = await UserService.getUserByTelegramId(telegramId);

        if(userData) {
            // –û–±–Ω–æ–≤–ª—è–µ–º –∫–æ–ª-–≤–æ –±–µ—Å–ø–ª–∞—Ç–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
            commandData.freeRequests = userData.requestsLeft;

            // –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–¥–ø–∏—Å–∫–∏
            if(userData.subscriptionExpiry) {
                const remainingSeconds = getTimeRemainingInSeconds(userData.subscriptionExpiry);

                if (remainingSeconds > 0) {
                    commandData.hasSubscription = true;
                    commandData.subscriptionExpiry = userData.subscriptionExpiry;
                }
            }
        }
        else {
            logger.error(`–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å telegram ID: ${telegramId}`);

            await ctx.reply("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∞—à–µ–π –∫–æ–º–∞–Ω–¥—ã, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –Ω–∞–∂–∞—Ç—å /start.");

            return;
        }
    } catch (error) {
        logger.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: ${(error as Error).message}`);

        await ctx.reply("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∞—à–µ–π –∫–æ–º–∞–Ω–¥—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.");

        return;
    }

    // –í—Ç–æ—Ä–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ: –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏ –∏ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
    if (commandData.hasSubscription) {
        const days = pluralize(getTimeRemainingInDays(commandData.subscriptionExpiry), "–¥–µ–Ω—å", "–¥–Ω—è", "–¥–Ω–µ–π");

        if(getTimeRemainingInDays(commandData.subscriptionExpiry) > 0) {
            await ctx.reply(
                `–£ –≤–∞—Å –∞–∫—Ç–∏–≤–Ω–∞ –ø–æ–¥–ø–∏—Å–∫–∞ –µ—â—ë ${getTimeRemainingInDays(commandData.subscriptionExpiry).toString()} ${days}. ‚ú®`
            );
        }
        else {
            await ctx.reply(
                `–£ –≤–∞—Å –∞–∫—Ç–∏–≤–Ω–∞ –ø–æ–¥–ø–∏—Å–∫–∞ –µ—â—ë ${getTimeRemainingInHMS(commandData.subscriptionExpiry) ?? '0 –¥–Ω–µ–π'}. ‚ú®`
            );
        }
    }
    else if (commandData.freeRequests > 0) {
        const free = pluralize(commandData.freeRequests, "–±–µ—Å–ø–ª–∞—Ç–Ω—ã–π", "–±–µ—Å–ø–ª–∞—Ç–Ω—ã—Ö", "–±–µ—Å–ø–ª–∞—Ç–Ω—ã—Ö");
        const requests = pluralize(commandData.freeRequests, "–∑–∞–ø—Ä–æ—Å", "–∑–∞–ø—Ä–æ—Å–∞", "–∑–∞–ø—Ä–æ—Å–æ–≤");

        await ctx.reply(
            `–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–∏, –Ω–æ –≤–∞–º –¥–æ—Å—Ç—É–ø–Ω–æ ${commandData.freeRequests} ${free} ${requests}. ‚ú®`
        );
    }
    else {
        await ctx.reply(
            "–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–∏, –∏ –¥–æ—Å—Ç—É–ø–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å.\n\n" +
            "–ß—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è —Å–µ—Ä–≤–∏—Å–æ–º:\n\n" +
            "üîπ –û—Ñ–æ—Ä–º–∏—Ç–µ –ø–æ–¥–ø–∏—Å–∫—É.\n" +
            "üîπ –ö—É–ø–∏—Ç–µ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã.\n" +
            "üîπ –ü—Ä–∏–≥–ª–∞—Å–∏—Ç–µ –¥—Ä—É–∑–µ–π —á–µ—Ä–µ–∑ –Ω–∞—à—É —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—É—é –ø—Ä–æ–≥—Ä–∞–º–º—É.\n" +
            "üîπ –ü–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ –Ω–∞—à–∏ –∫–∞–Ω–∞–ª—ã –∏ –ø–æ–ª—É—á–∏—Ç–µ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã.\n\n" +
            "–ï—Å–ª–∏ –≤–æ–∑–Ω–∏–∫–Ω—É—Ç –≤–æ–ø—Ä–æ—Å—ã, —Ç–µ—Ö–ø–æ–¥–¥–µ—Ä–∂–∫–∞ –≤—Å–µ–≥–¥–∞ –Ω–∞ —Å–≤—è–∑–∏: @bot_lovemyself. üí´"
        );
    }

    // –¢—Ä–µ—Ç—å–µ —Å–æ–æ–±—â–µ–Ω–∏–µ: –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –Ω–∞—á–∞—Ç—å —Ä–∞—Å–∫–ª–∞–¥
    if (commandData.hasSubscription || commandData.freeRequests > 0) {
        await ctx.reply("–ù–∞–ø–∏—à–∏—Ç–µ —Å–≤–æ–π –≤–æ–ø—Ä–æ—Å –∫–∞—Ä—Ç–∞–º, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å —Ä–∞—Å–∫–ª–∞–¥:");

        if(!sessionStateManager.getSessionState(telegramId)) {
            sessionStateManager.setSession(telegramId);
        }

        // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å —Å–µ—Å—Å–∏–∏
        sessionStateManager.updateSessionState(telegramId, {currentStep: SessionStepsEnum.QUESTION_INPUT});
    }
}