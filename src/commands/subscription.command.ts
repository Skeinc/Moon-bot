import { backToMenu } from "@actions/menu.action";
import { TariffInterface } from "@interfaces/api/tariff.interface";
import { UserInterface } from "@interfaces/api/user.interface";
import { logger } from "@services/logger.service";
import { TariffService } from "@services/tariffs.service";
import { UserService } from "@services/user.service";
import { checkTelegramID } from "@utils/checkTelegramID.util";
import { getTimeRemainingInDays, getTimeRemainingInHMS, getTimeRemainingInSeconds } from "@utils/date.util";
import { pluralize } from "@utils/pluralize.util";
import { Context, InlineKeyboard } from "grammy";
import { PaymentMethodsEnum } from "../enums/paymentMethod.enum";
import { createSubscriptionButtons } from "@utils/generateSubscriptionButtons.util";

export const subscriptionCommand = async (ctx: Context) => {
    if(!await checkTelegramID(ctx)) {
        return;
    }

    // –î–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const telegramId = ctx.from?.id!;
    
    // –î–∞–Ω–Ω—ã–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–º–∞–Ω–¥—ã
    const commandData = {
        hasActiveSubscription: false,
        subscriptionExpiry: '',
    };

    try {
        const userData: UserInterface | null = await UserService.getUserByTelegramId(telegramId);

        if(userData) {
            // –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–¥–ø–∏—Å–∫–∏
            if(userData.subscriptionExpiry) {
                const remainingSeconds = getTimeRemainingInSeconds(userData.subscriptionExpiry);

                if (remainingSeconds > 0) {
                    commandData.hasActiveSubscription = true;
                    commandData.subscriptionExpiry = userData.subscriptionExpiry;
                }
            }
        }
        else {
            logger.error(`–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å telegram ID: ${telegramId}`);

            await ctx.reply("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∞—à–µ–π –∫–æ–º–∞–Ω–¥—ã, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –Ω–∞–∂–∞—Ç—å /start.");
        }
    } catch (error) {
        logger.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: ${(error as Error).message}`);

        await ctx.reply("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∞—à–µ–π –∫–æ–º–∞–Ω–¥—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.");

        return;
    }

    if (!commandData.hasActiveSubscription) {
        let subscriptionKeyboard: InlineKeyboard;

        // –ï—Å–ª–∏ –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–µ—Ç
        const subscriptionDescription = `
üí≥ **–ú–µ–∂–¥—É–Ω–∞—Ä–æ–¥–Ω–∞—è –æ–ø–ª–∞—Ç–∞ —á–µ—Ä–µ–∑ TelegramStars**

–ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –≤–∞—à –±–∞–ª–∞–Ω—Å –æ–±–Ω–æ–≤–∏—Ç—Å—è –≤ —Ç–µ—á–µ–Ω–∏–µ **1‚Äì2 –º–∏–Ω—É—Ç**.

–ï—Å–ª–∏ —ç—Ç–æ–≥–æ –Ω–µ –ø—Ä–æ–∏–∑–æ—à–ª–æ, —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π.
        `;

        // –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —Ç–∞—Ä–∏—Ñ–æ–≤
        try {
            const tariffsData: TariffInterface[] | null = await TariffService.getTariffsByPaymentMethod(PaymentMethodsEnum.UKASSA);

            if(tariffsData && tariffsData.length > 0) {
                // –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø–æ–ª—É—á–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
                subscriptionKeyboard = createSubscriptionButtons(tariffsData, PaymentMethodsEnum.UKASSA);

                await ctx.reply(subscriptionDescription, {
                    reply_markup: subscriptionKeyboard,
                    parse_mode: "Markdown",
                });
            }
            else {
                logger.error(`–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ —Ç–∞—Ä–∏—Ñ—ã –ø–æ —Å–ø–æ—Å–æ–±—É –æ–ø–ª–∞—Ç—ã: ${PaymentMethodsEnum.UKASSA}`);

                await ctx.reply("–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –ø–æ–¥—Ö–æ–¥—è—â–∏–µ —Ç–∞—Ä–∏—Ñ—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.");
            }
        } catch (error) {
            logger.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ —Ç–∞—Ä–∏—Ñ–æ–≤ –ø–æ —Å–ø–æ—Å–æ–±—É –æ–ø–ª–∞—Ç—ã: ${(error as Error).message}`);

            await ctx.reply("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∞—à–µ–π –∫–æ–º–∞–Ω–¥—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.");

            return;
        }

        await backToMenu(ctx);
    } else {
        const days = pluralize(getTimeRemainingInDays(commandData.subscriptionExpiry), "–¥–µ–Ω—å", "–¥–Ω—è", "–¥–Ω–µ–π");
        
        // –ï—Å–ª–∏ –ø–æ–¥–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–Ω–∞
        const subscriptionDescription = `
üë§ **–£ –≤–∞—Å —É–∂–µ –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞!**

‚è≥ **–û—Å—Ç–∞–ª–æ—Å—å ${getTimeRemainingInDays(commandData.subscriptionExpiry) > 0 ? (getTimeRemainingInDays(commandData.subscriptionExpiry) + ' ' + days) : getTimeRemainingInHMS(commandData.subscriptionExpiry)} –¥–æ –µ—ë –æ–∫–æ–Ω—á–∞–Ω–∏—è.**
        `;

        await backToMenu(ctx, subscriptionDescription);
    }
}