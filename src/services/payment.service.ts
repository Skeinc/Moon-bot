import { Context } from "grammy";
import { ApiService } from "./apiService.service";
import { TelegramPaymentInterface } from "@interfaces/telegram/payment.interface";
import { LabeledPrice, SuccessfulPayment } from "grammy/types";
import { logger } from "./logger.service";
import { UserService } from "./user.service";
import { UserInterface } from "@interfaces/api/user.interface";
import { TariffInterface } from "@interfaces/api/tariff.interface";
import { TariffService } from "./tariffs.service";
import { TransactionStatusesEnum } from "../enums/transaction.enum";
import { TransactionService } from "./transaction.service";
import { TransactionInterface } from "@interfaces/api/transaction.interface";

export class PaymentService {
    // –°–æ–∑–¥–∞–Ω–∏–µ –ø–ª–∞—Ç–µ–∂–∞ —á–µ—Ä–µ–∑ –Æ–ö–∞—Å—Å–∞
    static async createPaymentWithYooKassa(data: {amount: string, description: string}): Promise<any | null> {
        const response = await ApiService.postData<any>('/payments/yookassa', data);

        if (response.success && response.data) {
            return response.data;
        } else {
            return null;
        }
    }

    // –ò–Ω–∏—Ü–∏–∞—Ü–∏—è –ø–ª–∞—Ç–µ–∂–∞
    static async createPaymentWithTelegram(ctx: Context, telegramId: number, paymentDetails: TelegramPaymentInterface): Promise<void> {
        const { title, description, payload, currency, amount } = paymentDetails;

        if (!ctx.api) {
            throw new Error("Telegram API is not available in the context.");
        }

        const prices: LabeledPrice[] = [
            {
                label: title,
                amount: amount,
            }
        ];

        try {
            const invoiceLink: string = await ctx.api.createInvoiceLink(title, description, payload, "", currency, prices);

            if (invoiceLink) {
                const inlineKeyboard = {
                    inline_keyboard: [
                        [
                            {
                                text: "üí≥ –ü–µ—Ä–µ–π—Ç–∏ –∫ –æ–ø–ª–∞—Ç–µ",
                                url: invoiceLink,
                            }
                        ]
                    ]
                };

                await ctx.api.sendMessage(telegramId, "üåü –î–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –æ–ø–ª–∞—Ç—ã –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ:", {
                    reply_markup: inlineKeyboard,
                });
            } else {
                logger.error('–ù–µ —É–¥–∞–ª–æ—Å—å —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞—Ç—å —Å—Å—ã–ª–∫—É –Ω–∞ –æ–ø–ª–∞—Ç—É');
            }
        } catch (error) {
            logger.error("–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–∏–∑–≤–µ—Å—Ç–∏ –æ–ø–ª–∞—Ç—É:", error);
            throw new Error("Failed to send invoice.");
        }
    }

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ —É—Å–ø–µ—à–Ω–æ–≥–æ –ø–ª–∞—Ç–µ–∂–∞ –¥–ª—è –¢–ì
    static async handleSuccessfulPayment(ctx: Context, paymentInfo: SuccessfulPayment, telegramId: number): Promise<void> {
        const transactionId = paymentInfo.invoice_payload;

        // –ù–∞–π—Ç–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é –ø–æ paymentId
        const transactionData: TransactionInterface | null = await TransactionService.getTransactionByTransactionId(transactionId);
    
        if (!transactionData) {
            await ctx.reply(`
üöß *–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞!*  
–ú—ã –Ω–µ —Å–º–æ–≥–ª–∏ –Ω–∞–π—Ç–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏.  
–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É. üôè
`.trim(), { parse_mode: "Markdown" });
            
            return;
        }
    
        // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
        const updateTransactionData = {
            id: transactionData.id,
            status: TransactionStatusesEnum.COMPLETED,
        };
    
        const updatedTransaction = await TransactionService.updateTransaction(transactionData.id, updateTransactionData);
    
        if(!updatedTransaction) {
            await ctx.reply(`
üöß *–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞!*  
–ú—ã –Ω–µ —Å–º–æ–≥–ª–∏ –æ–±–Ω–æ–≤–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏.  
–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É. üôè
`.trim(), { parse_mode: "Markdown" });
            
            return;
        }
    
        // –ò—â–µ–º –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–π —Ç–∞—Ä–∏—Ñ
        const tariffData: TariffInterface | null = await TariffService.getTariff(transactionData.tariffId ?? '');
    
        if (!tariffData) {
            await ctx.reply(`
üöß *–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞!*  
–ú—ã –Ω–µ —Å–º–æ–≥–ª–∏ –Ω–∞–π—Ç–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–∞—Ä–∏—Ñ–µ.  
–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É. üôè
`.trim(), { parse_mode: "Markdown" });
            
            return;
        }
    
        // –ù–∞–π—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ userId
        const userData: UserInterface | null = await UserService.getUserById(transactionData.userId);
    
        if (!userData) {
            await ctx.reply(`
üöß *–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞!*  
–ú—ã –Ω–µ —Å–º–æ–≥–ª–∏ –Ω–∞–π—Ç–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤–∞—Å.  
–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É. üôè
`.trim(), { parse_mode: "Markdown" });
            
            return;
        }
    
        // –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        const updateUserData: Partial<UserInterface> = { id: userData.id };
    
        // –û–±–Ω–æ–≤–ª—è–µ–º –∫–æ–ª-–≤–æ –±–µ—Å–ø–ª–∞—Ç–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤ –∏–ª–∏ —Å—Ç–∞—Ç—É—Å –ø–æ–¥–ø–∏—Å–∫–∏
        if (!tariffData.duration && tariffData.requestLimit) {
            updateUserData.requestsLeft = (userData.requestsLeft || 0) + tariffData.requestLimit;
        } else {
            const currentDate = new Date();
            const subscriptionExpiry = new Date(currentDate);
            subscriptionExpiry.setDate(currentDate.getDate() + (tariffData.duration || 0));
            updateUserData.subscriptionExpiry = subscriptionExpiry.toISOString();
        }
    
        // –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        await UserService.updateUser(userData.id, updateUserData);
    
        await ctx.reply("‚úÖ –û–ø–ª–∞—Ç–∞ —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞! –°–ø–∞—Å–∏–±–æ –∑–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –Ω–∞—à–µ–≥–æ —Å–µ—Ä–≤–∏—Å–∞.");
    }
}