import { checkTelegramID } from "@utils/checkTelegramID.util";
import { pluralize } from "@utils/pluralize.util";
import { Context } from "grammy";
import { referralStateManager } from "../states/referralState";
import { userStateManager } from "../states/userState";
import { logger } from "@services/logger.service";
import { ReferralService } from "@services/referral.service";
import { ReferralInterface } from "@interfaces/api/referral.interface";
import { UserInterface } from "@interfaces/api/user.interface";
import { UserService } from "@services/user.service";
import { UserStateInterface } from "@interfaces/states/userState.interface";

export const referralCallback = async (ctx: Context) => {
    const data = ctx.callbackQuery?.data;

    if(!await checkTelegramID(ctx)) {
        return;
    }
    
    // –î–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const telegramId = ctx.from?.id!;
    let userData: UserInterface | UserStateInterface | undefined | null = userStateManager.getUserState(telegramId);

    // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if (!userData) {
        try {
            userData = await UserService.getUserByTelegramId(telegramId);

            if (userData) {
                userStateManager.initializeUser({
                    id: userData.id,
                    telegramId: userData.telegramId,
                    username: userData.username,
                    roleId: userData.roleId,
                    requestsLeft: userData.requestsLeft,
                    subscriptionExpiry: userData.subscriptionExpiry,
                    referrerId: userData.referrerId,
                    referralLink: userData.referralLink,
                });
            } 
            else {
                await ctx.reply(`
üöß *–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω!*  
–ú—ã –Ω–µ —Å–º–æ–≥–ª–∏ –Ω–∞–π—Ç–∏ –≤–∞—à –∞–∫–∫–∞—É–Ω—Ç –≤ —Å–∏—Å—Ç–µ–º–µ.  
–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –Ω–∞–∂–∞—Ç—å /start –∏ –Ω–∞—á–∞—Ç—å —Å–Ω–∞—á–∞–ª–∞.
`.trim(), { parse_mode: "Markdown" });

                return;
            }
        } catch (error) {
            logger.error(`–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: ${(error as Error).message}`);

            await ctx.reply(`
üöß *–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞!*  
–ú—ã –Ω–µ —Å–º–æ–≥–ª–∏ –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –≤–∞—à –∑–∞–ø—Ä–æ—Å. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.
`.trim(), { parse_mode: "Markdown" });

            return;
        }
    }

    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤
    let referralQuantity = 0;

    try {
        const referralsData: ReferralInterface[] | null = await ReferralService.getReferralsByReferrerId(userData.id);

        referralQuantity = referralsData ? referralsData.length : 0;
    } catch (error) {
        logger.error(`–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: ${(error as Error).message}`);

        await ctx.reply(`
üöß *–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞!*  
–ú—ã –Ω–µ —Å–º–æ–≥–ª–∏ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –≤–∞—à–∏ —Ä–µ—Ñ–µ—Ä–∞–ª—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.
`.trim(), { parse_mode: "Markdown" });

        return;
    }

    switch (data) {
        case "generate_referral_link":
            // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—É—é —Å–∏—Å—Ç–µ–º—É –≤ storage
            referralStateManager.initReferralState(telegramId, true, userData.referralLink, referralQuantity);

            await ctx.reply(`
üîó –í–∞—à–∞ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞:
${userData.referralLink}  
–ü—Ä–∏–≥–ª–∞—à–∞–π—Ç–µ –¥—Ä—É–∑–µ–π, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∞—Ç—å –±–æ–Ω—É—Å—ã! üéâ
`.trim());

            break;
        case "get_referral_link":
            // –û–±–Ω–æ–≤–ª—è–µ–º —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—É—é —Å–∏—Å—Ç–µ–º—É –≤ storage
            referralStateManager.updateReferralState(telegramId, { referredUsers: referralQuantity });

            await ctx.reply(`
üîó –í–∞—à–∞ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞:  
${userData.referralLink}  
–ü–æ–¥–µ–ª–∏—Ç–µ—Å—å –µ—é, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∞—Ç—å –±–æ–Ω—É—Å—ã –∑–∞ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π! üéâ
`.trim());

            break;
        case "my_bonuses":
            const invites = pluralize(referralQuantity, "–ø—Ä–∏–≥–ª–∞—à–µ–Ω–Ω—ã–π", "–ø—Ä–∏–≥–ª–∞—à–µ–Ω–Ω—ã—Ö", "–ø—Ä–∏–≥–ª–∞—à–µ–Ω–Ω—ã—Ö");
            const users = pluralize(referralQuantity, "–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å", "–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", "–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π");
            const requests = pluralize(referralQuantity, "–∑–∞–ø—Ä–æ—Å", "–∑–∞–ø—Ä–æ—Å–∞", "–∑–∞–ø—Ä–æ—Å–æ–≤");
            const bonus = pluralize(referralQuantity, "–±–æ–Ω—É—Å–Ω—ã–π", "–±–æ–Ω—É—Å–Ω—ã—Ö", "–±–æ–Ω—É—Å–Ω—ã—Ö");

            await ctx.reply(`
üéÅ *–í–∞—à–∏ –±–æ–Ω—É—Å—ã:*  
- –í—ã –ø—Ä–∏–≥–ª–∞—Å–∏–ª–∏: *${referralQuantity}* ${invites} ${users}.  
- –ü–æ–ª—É—á–µ–Ω–æ –±–æ–Ω—É—Å–æ–≤: *${referralQuantity}* ${bonus} ${requests}.  
                
–°–ø–∞—Å–∏–±–æ –∑–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –Ω–∞—à–µ–π —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π –ø—Ä–æ–≥—Ä–∞–º–º—ã! üåü
`.trim(), { parse_mode: "Markdown" });

            break;
        default:
            await ctx.reply(`
‚ùì *–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞!*  
–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É, –µ—Å–ª–∏ –ø—Ä–æ–±–ª–µ–º–∞ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç—Å—è.
`.trim(), { parse_mode: "Markdown" });

            break;
    }

    await ctx.answerCallbackQuery();
}