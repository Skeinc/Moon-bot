import { TariffService } from "@services/tariffs.service";
import { Context, InlineKeyboard } from "grammy";
import { logger } from "@services/logger.service";
import { PaymentService } from "@services/payment.service";
import { TariffInterface } from "@interfaces/api/tariff.interface";
import { UserInterface } from "@interfaces/api/user.interface";
import { UserStateInterface } from "@interfaces/states/userState.interface";
import { userStateManager } from "../states/userState";
import { checkTelegramID } from "@utils/checkTelegramID.util";
import { UserService } from "@services/user.service";
import { TransactionInterface } from "@interfaces/api/transaction.interface";
import { TransactionService } from "@services/transaction.service";
import { CurrencyEnum } from "../enums/currency.enum";
import { TransactionStatusesEnum, TransactionTypesEnum } from "../enums/transaction.enum";
import { InternationalSubscribeCallbacksEnum, SubscribeCallbacksEnum } from "../enums/subscription.enum";
import { getTransactionTypeByCallback } from "@utils/getTransactionTypeByCallback.util";

export const subscribeCallback = async (ctx: Context) => {
    if (!await checkTelegramID(ctx)) {
        return;
    }

    const data = ctx.callbackQuery?.data;
    const telegramId = ctx.from?.id!;

    if (!data) {
        await ctx.reply("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.");

        return;
    }

    // –î–∞–Ω–Ω—ã–µ –¥–ª—è –æ–ø–ª–∞—Ç—ã
    let amount: string = "";
    let description: string = "";

    switch (data) {
        case SubscribeCallbacksEnum.SUBSCRIBE_10_REQUESTS:
            await ctx.reply("üéâ –í—ã –≤—ã–±—Ä–∞–ª–∏ –ø–æ–¥–ø–∏—Å–∫—É: 10 –∑–∞–ø—Ä–æ—Å–æ–≤ –∑–∞ 199 —Ä—É–±–ª–µ–π. –û–∂–∏–¥–∞–π—Ç–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–π –¥–ª—è –æ–ø–ª–∞—Ç—ã.");
            amount = "199.00";
            description = "–ü–æ–¥–ø–∏—Å–∫–∞: 10 –∑–∞–ø—Ä–æ—Å–æ–≤";

            break;
        case SubscribeCallbacksEnum.SUBSCRIBE_30_REQUESTS:
            await ctx.reply("üéâ –í—ã –≤—ã–±—Ä–∞–ª–∏ –ø–æ–¥–ø–∏—Å–∫—É: 30 –∑–∞–ø—Ä–æ—Å–æ–≤ –∑–∞ 349 —Ä—É–±–ª–µ–π. –û–∂–∏–¥–∞–π—Ç–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–π –¥–ª—è –æ–ø–ª–∞—Ç—ã.");
            amount = "349.00";
            description = "–ü–æ–¥–ø–∏—Å–∫–∞: 30 –∑–∞–ø—Ä–æ—Å–æ–≤";

            break;
        case SubscribeCallbacksEnum.SUBSCRIBE_1_DAY:
            await ctx.reply("üéâ –í—ã –≤—ã–±—Ä–∞–ª–∏ –ø–æ–¥–ø–∏—Å–∫—É: 1 –¥–µ–Ω—å (–±–µ–∑–ª–∏–º–∏—Ç) –∑–∞ 499 —Ä—É–±–ª–µ–π. –û–∂–∏–¥–∞–π—Ç–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–π –¥–ª—è –æ–ø–ª–∞—Ç—ã.");
            amount = "499.00";
            description = "–ü–æ–¥–ø–∏—Å–∫–∞: 1 –¥–µ–Ω—å (–±–µ–∑–ª–∏–º–∏—Ç)";
            
            break;
        case SubscribeCallbacksEnum.SUBSCRIBE_7_DAYS:
            await ctx.reply("üéâ –í—ã –≤—ã–±—Ä–∞–ª–∏ –ø–æ–¥–ø–∏—Å–∫—É: 7 –¥–Ω–µ–π (–±–µ–∑–ª–∏–º–∏—Ç) –∑–∞ 699 —Ä—É–±–ª–µ–π. –û–∂–∏–¥–∞–π—Ç–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–π –¥–ª—è –æ–ø–ª–∞—Ç—ã.");
            amount = "699.00";
            description = "–ü–æ–¥–ø–∏—Å–∫–∞: 7 –¥–Ω–µ–π (–±–µ–∑–ª–∏–º–∏—Ç)";

            break;
        case SubscribeCallbacksEnum.SUBSCRIBE_30_DAYS:
            await ctx.reply("üéâ –í—ã –≤—ã–±—Ä–∞–ª–∏ –ø–æ–¥–ø–∏—Å–∫—É: 30 –¥–Ω–µ–π (–±–µ–∑–ª–∏–º–∏—Ç) –∑–∞ 999 —Ä—É–±–ª–µ–π. –û–∂–∏–¥–∞–π—Ç–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–π –¥–ª—è –æ–ø–ª–∞—Ç—ã.");
            amount = "999.00";
            description = "–ü–æ–¥–ø–∏—Å–∫–∞: 30 –¥–Ω–µ–π (–±–µ–∑–ª–∏–º–∏—Ç)";

            break;
        default:
            await ctx.reply("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞ –ø–æ–¥–ø–∏—Å–∫–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.");
            await ctx.answerCallbackQuery();

            break;
    }

    try {
        // –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö —Ç–∞—Ä–∏—Ñ–∞
        const tariffData: TariffInterface | null = await TariffService.getTariffByCallback(data);

        if (!tariffData) {
            await ctx.reply(`
üöß *–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞!*  
–ú—ã –Ω–µ —Å–º–æ–≥–ª–∏ –Ω–∞–π—Ç–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤—ã–±—Ä–∞–Ω–Ω–æ–º —Ç–∞—Ä–∏—Ñ–µ.  
–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É. üôè
`.trim(), { parse_mode: "Markdown" });

            return;
        }

        // –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        let userData: UserInterface | UserStateInterface | undefined | null = userStateManager.getUserState(telegramId);

        if(!userData) {
            userData = await UserService.getUserByTelegramId(telegramId);

            if(!userData) {
                await ctx.reply(`
üöß *–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞!*  
–ú—ã –Ω–µ —Å–º–æ–≥–ª–∏ –Ω–∞–π—Ç–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤–∞—Å.  
–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É. üôè
`.trim(), { parse_mode: "Markdown" });
                    
                return;
            }
        }

        // –°–æ–∑–¥–∞–Ω–∏–µ –ø–ª–∞—Ç–µ–∂–∞ —á–µ—Ä–µ–∑ YooKassa
        const paymentResponse = await PaymentService.createPaymentWithYooKassa({ amount, description });

        if (paymentResponse?.confirmation?.confirmation_url) {
            // –°–æ–∑–¥–∞–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é
            const createdTransactionData: TransactionInterface | null = await TransactionService.createTransaction(
                userData.id, amount, CurrencyEnum.RUB, getTransactionTypeByCallback(data! as SubscribeCallbacksEnum), TransactionStatusesEnum.PENDING, 1, tariffData.id, paymentResponse.id,
            );

            if(!createdTransactionData) {
                await ctx.reply(`
üöß *–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞!*  
–ú—ã –Ω–µ —Å–º–æ–≥–ª–∏ —Å–æ–∑–¥–∞—Ç—å —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é.  
–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É. üôè
`.trim(), { parse_mode: "Markdown" });
                    
                return;
            }

            // –í—ã–≤–æ–¥–∏–º –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é –¥–ª—è –æ–ø–ª–∞—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
            const paymentKeyboard = new InlineKeyboard().url(
                "üí≥ –ü–µ—Ä–µ–π—Ç–∏ –∫ –æ–ø–ª–∞—Ç–µ",
                paymentResponse.confirmation.confirmation_url
            );

            await ctx.reply(
            "üí≥ –î–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –æ–ø–ª–∞—Ç—ã –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ:",
            {
                reply_markup: paymentKeyboard,
            }
        );
        } else {
            await ctx.reply("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –ø–ª–∞—Ç–µ–∂. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.");
        }
    } catch (error) {
        await ctx.reply("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∞—à–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.");

        logger.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–ª–∞—Ç–µ–∂–∞: ${(error as Error).message}`);
    }

    await ctx.answerCallbackQuery();
}