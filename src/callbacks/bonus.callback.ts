import { UserInterface } from "@interfaces/api/user.interface";
import { UserStateInterface } from "@interfaces/states/userState.interface";
import { logger } from "@services/logger.service";
import { UserService } from "@services/user.service";
import { checkTelegramID } from "@utils/checkTelegramID.util";
import { Context } from "grammy";
import { userStateManager } from "../states/userState";
import { BonusInterface, CreateBonusInterface } from "@interfaces/api/bonus.interface";
import { BonusService } from "@services/bonus.service";
import { BonusTypeEnum } from "../enums/bonus.enum";

export const checkSubscriptionCallback = async (ctx: Context) => {
    if (!await checkTelegramID(ctx)) {
        return;
    }

    // ID –∫–∞–Ω–∞–ª–∞
    const channelId = "@tarobotik";

    // –î–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const telegramId = ctx.from?.id!;
    let userData: UserInterface | UserStateInterface | undefined | null = userStateManager.getUserState(telegramId);

    try {
        await ctx.answerCallbackQuery({
            text: "–ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∞—à—É –ø–æ–¥–ø–∏—Å–∫—É... ‚è≥",
        });

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –∫–∞–Ω–∞–ª–µ
        const chatMember = await ctx.api.getChatMember(channelId, telegramId);

        const isSubscribed = ['member', 'administrator', 'creator'].includes(chatMember.status);

        if (isSubscribed) {
            if (!userData) {
                userData = await UserService.getUserByTelegramId(telegramId);
            }

            // –ï—Å–ª–∏ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞–π–¥–µ–Ω—ã
            if (userData) {
                const userBonuses: BonusInterface[] | null = await BonusService.getBonusesByUserId(userData.id);

                // –ï—Å–ª–∏ –µ—Å—Ç—å –±–æ–Ω—É—Å—ã —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                if (userBonuses) {
                    const subscriptionBonuses: BonusInterface[] = userBonuses.filter((bonus: BonusInterface) => {
                        return bonus.bonusType === BonusTypeEnum.SUBSCRIPTION_CHANNEL;
                    });

                    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –±–æ–Ω—É—Å –∑–∞ –ø–æ–¥–ø–∏—Å–∫—É
                    if (subscriptionBonuses.length === 0) {
                        const body = {
                            userId: userData.id,
                            referralId: null,
                            bonusType: BonusTypeEnum.SUBSCRIPTION_CHANNEL,
                            bonusValue: 3,
                        }

                        const createdBonus: CreateBonusInterface | null = await BonusService.createBonus(body);

                        if (createdBonus) {
                            await ctx.reply(`
üéâ *–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º!*  
–í—ã –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ –Ω–∞—à –∫–∞–Ω–∞–ª, –∏ –≤–∞–º –Ω–∞—á–∏—Å–ª–µ–Ω–æ *3 –±–µ—Å–ø–ª–∞—Ç–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–∞*.  
–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∏—Ö, —á—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å –æ—Ç–≤–µ—Ç—ã –Ω–∞ —Å–≤–æ–∏ –≤–æ–ø—Ä–æ—Å—ã! ‚ú®
`.trim(), { parse_mode: "Markdown" });
                        }
                        else {
                            logger.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –±–æ–Ω—É—Å–∞`);

                            await ctx.reply(`
üöß *–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫!*  
–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –º—ã –Ω–µ —Å–º–æ–≥–ª–∏ –Ω–∞—á–∏—Å–ª–∏—Ç—å –≤–∞–º –±–æ–Ω—É—Å—ã.  
–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –Ω–∞—à–µ–π –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –¥–ª—è —Ä–µ—à–µ–Ω–∏—è –ø—Ä–æ–±–ª–µ–º—ã. üôè
`.trim(), { parse_mode: "Markdown" });
                        }
                    }
                    else {
                        await ctx.reply(`
‚úÖ *–í—ã —É–∂–µ –ø–æ–¥–ø–∏—Å–∞–Ω—ã!*  
–í–∞—à –±–æ–Ω—É—Å –∑–∞ –ø–æ–¥–ø–∏—Å–∫—É –Ω–∞ –Ω–∞—à –∫–∞–Ω–∞–ª —É–∂–µ –±—ã–ª –Ω–∞—á–∏—Å–ª–µ–Ω —Ä–∞–Ω–µ–µ.  
–°–ø–∞—Å–∏–±–æ, —á—Ç–æ –æ—Å—Ç–∞–µ—Ç–µ—Å—å —Å –Ω–∞–º–∏! üåü
`.trim(), { parse_mode: "Markdown" });
                    }
                }
                else {
                    await ctx.reply(`
üöß *–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ø–∏—Å–∫–∏!*  
–ú—ã –Ω–µ —Å–º–æ–≥–ª–∏ –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤–∞—à–∏—Ö –±–æ–Ω—É—Å–∞—Ö.  
–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É. üôè
`.trim(), { parse_mode: "Markdown" });
                }
            }
            else {
                await ctx.reply(`
üöß *–û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏!*  
–ú—ã –Ω–µ —Å–º–æ–≥–ª–∏ –Ω–∞–π—Ç–∏ –≤–∞—à–∏ –¥–∞–Ω–Ω—ã–µ –≤ –Ω–∞—à–µ–π —Å–∏—Å—Ç–µ–º–µ.  
–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ —Å–Ω–∞—á–∞–ª–∞, –Ω–∞–∂–∞–≤ –∫–æ–º–∞–Ω–¥—É /start. üôè
`.trim(), { parse_mode: "Markdown" });
            }
        } else {
            await ctx.reply(`
üîî *–í—ã –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ –Ω–∞—à –∫–∞–Ω–∞–ª!*  
–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ –Ω–∞—à –∫–∞–Ω–∞–ª [@tarobotik](https://t.me/tarobotik) –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.  
–ü–æ—Å–ª–µ –ø–æ–¥–ø–∏—Å–∫–∏ –≤—ã –ø–æ–ª—É—á–∏—Ç–µ 3 –±–µ—Å–ø–ª–∞—Ç–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–∞! ‚ú®
`.trim(), { parse_mode: "Markdown" });
        }
    } catch (error) {
        logger.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø–æ–¥–ø–∏—Å–∫–∏: ${error}`);

        await ctx.reply(`
üöß *–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞!*  
–ú—ã –Ω–µ —Å–º–æ–≥–ª–∏ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –≤–∞—à—É –ø–æ–¥–ø–∏—Å–∫—É.  
–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É. üôè
`.trim(), { parse_mode: "Markdown" });
    }
}