import { checkTelegramID } from "@utils/checkTelegramID.util";
import { Context } from "grammy";
import { sessionStateManager } from "../states/sessionState";
import { SessionStepsEnum } from "../enums/session.enum";
import { RequestService } from "@services/request.service";
import { userStateManager } from "../states/userState";
import { RequestStatusesEnum, RequestTypesEnum } from "../enums/request.enum";
import { logger } from "@services/logger.service";
import { UserInterface } from "@interfaces/api/user.interface";
import { UserService } from "@services/user.service";
import { generateRandomCards } from "@utils/generateRandomCards.util";
import { CreateRequestInterface, RequestInterface } from "@interfaces/api/request.interface";
import { newSpreadCommand } from "@commands/newSpread.command";

export const handleSpreadAction = async (ctx: Context) => {
    if(!await checkTelegramID(ctx)) {
        return;
    }
    
    const telegramId = ctx.from?.id!;

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const session = sessionStateManager.getSessionState(telegramId);
    
    if (!session || session.currentStep !== SessionStepsEnum.QUESTION_INPUT) {
        return;
    }

    // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—Å—Ç –≤–æ–ø—Ä–æ—Å–∞
    const question = ctx.message?.text;

    if (!question) {
        await ctx.reply("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–æ–ø—Ä–æ—Å.");

        return;
    }

    try {
        const storageUserData = userStateManager.getUserState(telegramId);
        sessionStateManager.updateSessionState(telegramId, { currentStep: SessionStepsEnum.CARD_SELECTION });
        const cards: string[] = generateRandomCards(3);

        // –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –æ –ø—Ä–æ—Ü–µ—Å—Å–µ —Ä–∞—Å–∫–ª–∞–¥–∞
        await ctx.reply("–í–∞—à –≤–æ–ø—Ä–æ—Å –ø—Ä–∏–Ω—è—Ç. –ö–∞—Ä—Ç—ã –≥–æ—Ç–æ–≤—è—Ç –æ—Ç–≤–µ—Ç... ‚ú®");

        let requestData: CreateRequestInterface | null = null;

        if (storageUserData) {
            // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –Ω–∞ –±–µ–∫–µ–Ω–¥
            requestData = await RequestService.createRequest(
                storageUserData.id, telegramId, RequestTypesEnum.NEW_SPREAD, question, cards, true
            );
        }
        else {
            const userData: UserInterface | null = await UserService.getUserByTelegramId(telegramId);

            if (userData) {
                requestData = await RequestService.createRequest(
                    userData.id, telegramId, RequestTypesEnum.NEW_SPREAD, question, cards, true
                );
            } else {
                logger.error(`–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å telegram ID: ${telegramId}`);

                await ctx.reply("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∞—à–µ–≥–æ —Ä–∞—Å–∫–ª–∞–¥–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –Ω–∞–∂–∞—Ç—å /start.");

                return;
            }
        }

        if (requestData) {
            // –£—Å–ø–µ—à–Ω—ã–π –æ—Ç–≤–µ—Ç —Å –±—ç–∫–µ–Ω–¥–∞
            const openAIResponse = requestData.responseData.answer || "–í—Å–µ–ª–µ–Ω–Ω–∞—è –Ω–µ —Å–º–æ–≥–ª–∞ –¥–∞—Ç—å —á–µ—Ç–∫–∏–π –æ—Ç–≤–µ—Ç.";
            const selectedCards = cards.join(", ");

            // –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –≤—ã–≤–æ–¥ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            const responseMessage = `
‚ú® *–í–∞—à —Ä–∞—Å–∫–ª–∞–¥ –≥–æ—Ç–æ–≤!* ‚ú®

üîÆ *–í—ã –≤—ã–±—Ä–∞–ª–∏ –∫–∞—Ä—Ç—ã*:  
${selectedCards}

üåå *–í—Å–µ–ª–µ–Ω–Ω–∞—è –æ—Ç–≤–µ—Ç–∏–ª–∞*:  
${openAIResponse}
            `.trim();

            await ctx.reply(responseMessage, { parse_mode: "Markdown" });

            const updatedRequest: RequestInterface | null = await RequestService.updateRequest(requestData.id, {
                status: RequestStatusesEnum.COMPLETED,
                finishedAt: new Date().toISOString(),
            });

            if(updatedRequest) {
                sessionStateManager.updateSessionState(telegramId, { currentStep: SessionStepsEnum.IDLE });

                // –í—ã–∑–æ–≤ newSpreadCommand
                await newSpreadCommand(ctx);
            }
            else {
                logger.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Ä–∞—Å–∫–ª–∞–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å ID: ${requestData.id}`);
        
                await ctx.reply("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∞—à–µ–≥–æ —Ä–∞—Å–∫–ª–∞–¥–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –Ω–∞–∂–∞—Ç—å /start.");
            }
        }

    } catch (error) {
        logger.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ä–∞—Å–∫–ª–∞–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: ${(error as Error).message}`);
        
        await ctx.reply("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∞—à–µ–≥–æ —Ä–∞—Å–∫–ª–∞–¥–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –Ω–∞–∂–∞—Ç—å /start.");
    }
};